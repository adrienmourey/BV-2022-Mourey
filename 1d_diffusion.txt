@author: Adrien J. Moureyclear all %load variablesload x_real %Distance in microns along the profileload Fo_init %Initial Fo concentration (Mg/(Mg_Fe)*100 in mol%) along the profileload Fo_real %EPMA Fo content measured along the profileload Ni_init %Initial Ni concentration (in wt.%) along the profileload Ni_real %EPMA nickel content measured along the profileload Ca_init %Initial Ca concentration in (wt.%)load Ca_real %EPMA calcium content measured along the profile %input starting conditionsT=1202+273.15; %temperature in K (constant)fug=10^(8.912-(25160/T)); %log fugacity in bars, expression from Zolotov & Fegley (1999)fug_pa=fug.*100000; %fugacity in PaP=60*1e6; %pressure in Paalpha=23.4; %angle between axis a and traversebeta=66.6; %angle between axis b and traversegamma=89.9; %angle between axis c and traverseR=8.31446; %gas constant in J/(mole K) %get distance step dx from distance profiledx=(max((x_real))-0)./(length(x_real)-1); %create a x dstance arrayx=(0:dx:max(x_real))'; %calculate initial diffusivities along each nodeDcFo_i=((10^-9.21).*((fug_pa/(10^-7)).^(1/6)).*(10.^(3.*(0.9-(Fo_init./100)))).*exp(-(201000+(P-1e5).*7e-6)/(R.*T)))*(1e12); %diffusivity along c-axis in um2/sDaFo_i=DcFo_i./6; %diffusivity along a-axis in um2/sDbFo_i=DaFo_i; %diffusivity along b-axis in um2/sDtFo_i=(DaFo_i.*(cos(deg2rad(alpha))^2))+(DbFo_i.*(cos(deg2rad(beta))^2))+(DcFo_i.*(cos(deg2rad(gamma))^2)); %diffusivity along traverse in um2/s DcNi_i=(10.^12).*(3.84*10^-9)*((fug_pa/10^-6)^(1/4.25))*(10.^(1.5*(0.9-(Fo_init./100)))).*exp((-220000+(7e-6).*(P-10.^5))/(R.*T)); %diffusivity along c-axis in um2/sDaNi_i=DcNi_i./6; %diffusivity along a-axis in um2/sDbNi_i=DaNi_i; %diffusivity along b-axis in um2/sDtNi_i=(DaNi_i.*(cos(deg2rad(alpha))^2))+(DbNi_i.*(cos(deg2rad(beta))^2))+(DcNi_i.*(cos(deg2rad(gamma))^2)); %diffusivity along traverse in um2/s DcCa_i=(10.^12).*(95.49*10^-12)*((fug_pa/10^-7)^(1/3.2)).*exp((-207000/(R.*T))); DaCa_i=(10.^12).*(16.59*10^-12)*((fug_pa/10^-7)^(1/3.2)).*exp((-193000/(R.*T))); DbCa_i=(10.^12).*(34.67*10^-12)*((fug_pa/10^-7)^(1/3.2)).*exp((-201000/(R.*T))); DtCa_i=(DaCa_i.*(cos(deg2rad(alpha))^2))+(DbCa_i.*(cos(deg2rad(beta))^2))+(DcCa_i.*(cos(deg2rad(gamma))^2));  %calculate time step dt, obeying numerical stability criterion R<0.5r=0.4;dt=r.*((dx.^2)/max(DtFo_i)); %define duration of diffusion modelduration=1000*24*60*60; %in sec %calculate total number of timesteps needed to reach final durationtimesteps=ceil(duration./dt); %define concentration arrays that will be renewed at every stepFo_new=Fo_init;Ni_new=Ni_init;Ca_new=Ca_init;DtFo_new=DtFo_i;DtNi_new=DtNi_i;DtCa_new=DtCa_i;Fo_all=zeros(length(x),timesteps);Ni_all=zeros(length(x),timesteps);Ca_all=zeros(length(x),timesteps);Fo_misfit=zeros(1,timesteps);t_Fo=zeros(1,timesteps);Ni_misfit=zeros(1,timesteps);t_Ni=zeros(1,timesteps);Ca_misfit=zeros(1,timesteps);t_Ca=zeros(1,timesteps); %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%perform calculations, solve continuity equation using finite differences (explicit) %Step in timefor j=1:timesteps    Fo_old=Fo_new;    Ni_old=Ni_new;    Ca_old=Ca_new;    DcFo_old=((10^-9.21).*((fug_pa/(10^-7)).^(1/6)).*(10.^(3.*(0.9-(Fo_old./100)))).*exp(-(201000+(P-1e5).*7e-6)/(R.*T)))*(1e12); %diffusivity along c-axis in um2/s    DbFo_old=DcFo_old./6; %diffusivity along b-axis in um2/s    DaFo_old=DcFo_old./6; %diffusivity along a-axis in um2/s    DtFo_old=(DaFo_old.*(cos(deg2rad(alpha))^2))+(DbFo_old.*(cos(deg2rad(beta))^2))+(DcFo_old.*(cos(deg2rad(gamma))^2)); %diffusivity along traverse in um2/s        DcNi_old=(10.^12).*(3.84*10^-9)*((fug_pa/10^-6)^(1/4.25))*(10.^(1.5*(0.9-(Fo_init./100)))).*exp((-220000+(7e-6).*(P-10.^5))/(R.*T));     DaNi_old=DcNi_old./6;     DbNi_old=DaNi_old;     DtNi_old=(DaNi_old.*(cos(deg2rad(alpha))^2))+(DbNi_old.*(cos(deg2rad(beta))^2))+(DcNi_old.*(cos(deg2rad(gamma))^2));      DcCa_old=(10.^12).*(95.49*10^-12)*((fug_pa/10^-7)^(1/3.2)).*exp((-207000/(R.*T)));     DaCa_old=(10.^12).*(16.59*10^-12)*((fug_pa/10^-7)^(1/3.2)).*exp((-193000/(R.*T)));     DbCa_old=(10.^12).*(34.67*10^-12)*((fug_pa/10^-7)^(1/3.2)).*exp((-201000/(R.*T)));     DtCa_old=(DaCa_old.*(cos(deg2rad(alpha))^2))+(DbCa_old.*(cos(deg2rad(beta))^2))+(DcCa_old.*(cos(deg2rad(gamma))^2));          %Step in distance/space    for i=2:(length(x)-1)        Fo_new(i)=Fo_old(i) + (dt./dx.^2).*(((DtFo_old(i+1)-DtFo_old(i)).*(Fo_old(i+1)-Fo_old(i)))+DtFo_old(i).*(Fo_old(i+1)-2.*Fo_old(i)+Fo_old(i-1)));        Ni_new(i)=Ni_old(i) + (dt./dx.^2).*(((DtNi_old(i+1)-DtNi_old(i)).*(Ni_old(i+1)-Ni_old(i)))+DtNi_old(i).*(Ni_old(i+1)-2.*Ni_old(i)+Ni_old(i-1)));        pdC_Ca=(Ca_old(i+1)-Ca_old(i))./dx;        pdD_Ca=(DtCa_old-DtCa_old)./dx;        Ca_new(i)=Ca_old(i)+pdC_Ca.*pdD_Ca+((DtCa_old.*dt)/(dx.^2))*(Ca_old(i+1)-2.*Ca_old(i)+Ca_old(i-1));    end        %Define boundary conditions at the edges    Fo_new(1)=Fo_init(1);% boundary condition for first element    Ni_new(1)=Ni_init(1);    Ca_new(1)=Ca_init(1);    Fo_new(length(Fo_new))= Fo_init(length(Fo_init)); % boundary condition for last element    Ni_new(length(Ni_new))= Ni_init(length(Ni_init));    Ca_new(length(Ca_new))= Ca_init(length(Ca_init));    Fo_all(:,j)=Fo_new;    Ni_all(:,j)=Ni_new;    Ca_all(:,j)=Ca_new;    Fo_misfit(j)=((sum(Fo_old-Fo_real).^2)./length(x)).^0.5;    Ni_misfit(j)=((sum(Ni_old-Ni_real).^2)./length(x)).^0.5;    Ca_misfit(j)=((sum(Ca_old-Ca_real).^2)./length(x)).^0.5;    t_Fo(j)=(dt.*j)./(3600.*24);    t_Ni(j)=(dt.*j)./(3600.*24);    t_Ca(j)=(dt.*j)./(3600.*24);end %timestep correction utilized for diffusion models with two steps, where%diffusion after the first step cannot be the best fit to the dataInd_cor_Fo=0; %should be 0 by default for 1 step modelsInd_cor_Ni=0;Ind_cor_Ca=0; best_ind_Fo=find(Fo_misfit==min(Fo_misfit));best_time_Fo=t_Fo(best_ind_Fo+Ind_cor_Fo); %Mixing-to-eruption timescales from Fe-Mg modelingbest_ind_Ni=find(Ni_misfit==min(Ni_misfit));best_time_Ni=t_Ni(best_ind_Ni+Ind_cor_Ni); %Mixing-to-eruption timescales from Ni modelingbest_ind_Ca=find(Ca_misfit==min(Ca_misfit));best_time_Ca=t_Ca(best_ind_Ca+Ind_cor_Ca); %Mixing-to-eruption timescales from Ca modeling%Here we calculate the uncertainties following the approach of Girona &%Costa (2013)tau1=-((201000+(P-1e5).*7e-6)/R);% n and m are the number of theoretical curves with lower and larger diffusion time than the best fit% error for the Fo content = 0.05 (XFo)%sigma_plus and sigma_minus are the uncertainties (Â±) in days for the%diffusion timescalessigmat_plus_Fo=((dt)+(best_time_Fo.*3600.*24).*(exp(tau1.*((1./T)-(1./(T-sigmaT))))-1))./(3600*24);sigmat_minus_Fo=((dt)+(best_time_Fo.*3600.*24).*(1-exp(tau1.*((1./T)-(1./(T+sigmaT))))))./(3600*24);%plot various resultsfigure(1)subplot(2,3,1);plot(x,Fo_all(:,best_ind_Fo+Ind_cor_Fo),'r-');hold on;plot(x,Fo_init,'g-');hold on;plot(x,Fo_real,'bo','MarkerSize',8);xlabel 'Distance(microns)';ylabel 'Fo content'subplot(2,3,2);plot(x,Ni_all(:,best_ind_Ni+Ind_cor_Ni),'r-');hold on;plot(x,Ni_init,'g-');hold on;plot(x,Ni_real,'bo','MarkerSize',8);xlabel 'Distance(microns)';ylabel 'NiO wt.%'subplot(2,3,3);plot(x,Ca_all(:,best_ind_Ca+Ind_cor_Ca),'r-');hold on;plot(x,Ca_init,'g-');hold on;plot(x,Ca_real,'bo','MarkerSize',8);xlabel 'Distance(microns)';ylabel 'CaO wt.%'subplot(2,3,4);plot(t_Fo,Fo_misfit,'r-')xlabel 'Time(days)';ylabel 'Misfit Fo';subplot(2,3,5);plot(t_Ni,Ni_misfit,'r-')xlabel 'Time(days)';ylabel 'Misfit Ni';subplot(2,3,6);plot(t_Ca,Ca_misfit,'r-')xlabel 'Time(days)';ylabel 'Misfit Ca';